/*Roman to Integer
Los n√∫meros romanos est√°n representados por siete s√≠mbolos diferentes: I, V, X, L, C, D y M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
Por ejemplo, 2 se escribe como II en n√∫meros romanos, solo se suman dos unidades.
12 se escribe como XII, que es simplemente X + II. 
El n√∫mero 27 se escribe como XXVII, que es XX + V + II.

Los n√∫meros romanos generalmente se escriben de mayor a menor de izquierda a derecha. Sin embargo, el numeral para cuatro no es IIII. En cambio, el n√∫mero cuatro se escribe como IV. Como el uno est√° antes que el cinco lo restamos haciendo cuatro. El mismo principio se aplica al n√∫mero nueve, que se escribe como IX. Hay seis casos en los que se usa la resta:

I se puede colocar antes de V (5) y X (10) para hacer 4 y 9.
X se puede colocar antes de L (50) y C (100) para hacer 40 y 90.
C se puede colocar antes de D (500) y M (1000) para hacer 400 y 900.

Dado un n√∫mero romano, convi√©rtelo en un n√∫mero entero.
Example 1:

Input: s = "III"
Output: 3
Explicaci√≥n: III = 3.
Example 2:

Input: s = "LVIII"
Output: 58
Explicaci√≥n: L = 50, V= 5, III = 3.
Example 3:

Input: s = "MCMXCIV"
Output: 1994
Explicaci√≥n: M = 1000, CM = 900, XC = 90 and IV = 4.

Restricciones:

üî¥ 1 <= s.lenght <= 15
üî¥ s contiene solo los caracteres ('I', 'V', 'X', 'L', 'C', 'D', 'M').
üî¥ Se garantiza que s es un n√∫mero romano v√°lido en el rango [1, 3999].

*/

const { string } = require("mathjs");

function romanToInt(s) {
// T√∫ c√≥digo ac√°:
let Romanos= {
    I:1,
    V:5,
    X:10,
    L:50,
    C:100,
    D:500,
    M:1000
}
let sum=0;
for(var i=0;i<s.length;i++){
    var curSym= Romanos[s[i]];
    var nexSym=Romanos[s[i+1]];
    if(nexSym>curSym){
        sum-=curSym
    }
    else{
        sum+=curSym
    }
}
return sum
};



// No cambies nada despu√©s de esta l√≠nea

module.exports= romanToInt;